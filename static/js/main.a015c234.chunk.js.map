{"version":3,"sources":["components/Label/Label.js","components/Label/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/HelloWorld/HelloWorld.js","components/HelloWorld/index.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","_ref","htmlFor","label","required","react_default","a","createElement","style","display","color","__webpack_require__","d","__webpack_exports__","Label_Label","TextInput","htmlId","name","_ref$type","type","_ref$required","onChange","placeholder","value","error","children","props","Object","objectWithoutProperties","marginBottom","assign","id","border","className","TextInput_TextInput","ProgressBar","getColor","percent","_this","getWidthAsPercentOfTotalWidth","parseInt","width","_this$props","this","height","backgroundColor","React","Component","defaultProps","components_ProgressBar_ProgressBar","PasswordInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","EyeIcon","length","components_PasswordInput_PasswordInput","xmlns","viewBox","transform","fill","cx","cy","r","EyeIcon_EyeIcon","module","exports","description","code","examples","message","defaultValue","computed","confirmationMessage","onSubmit","minPasswordLength","EyeIconExample","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ps_react_EyeIcon__WEBPACK_IMPORTED_MODULE_1__","ExampleOptional","ps_react_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleRequired","ExampleAllFeatures","_Users_marcsi_Documents_ReuseReact_first_react_components_mar_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_marcsi_Documents_ReuseReact_first_react_components_mar_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_marcsi_Documents_ReuseReact_first_react_components_mar_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","password","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","ps_react_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","target","minLength","getQuality","Example100Percent","ps_react_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","Example10Percent","Example70Percent","ExampleError","ps_react_TextInput__WEBPACK_IMPORTED_MODULE_6__","TextInputBEM","Error","styled","div","_templateObject","Input","input","_templateObject2","Fieldset","_templateObject3","TextInputStyledComponents","styles","fieldset","inputError","TextInputCSSModules","HelloWorld","ExampleHelloWorld","components_HelloWorld","RegistrationForm","user","validate","submitted","email","errors","concat","getOwnPropertyNames","_this$state","_this$state$user","passwordQuality","ExampleRegistrationForm","console","log","components_RegistrationForm_RegistrationForm","map","./EyeIcon/Example","./EyeIcon/Example.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/Example100percent","./ProgressBar/Example100percent.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example70Percent","./ProgressBar/Example70Percent.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/ExampleError","./TextInputBEM/ExampleError.js","./TextInputCSSModules/ExampleError","./TextInputCSSModules/ExampleError.js","./TextInputStyledComponents/ExampleError","./TextInputStyledComponents/ExampleError.js","webpackContext","req","webpackContextResolve","o","e","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","_this$props$example","example","ExampleComponent","require","componentName","default","docs_CodeExample","Props","ComponentPage","component","docs_Example","docs_Props","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a015c234.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({ htmlFor, label, required }) {\n  return (\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\n      {label} {required && <span style={{ color: \"red\" }}> *</span>}\n    </label>\n  );\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","export { default } from \"./Label\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div style={{ marginBottom: 16 }}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && { border: \"solid 1px red\" }}\n        {...props}\n      />\n      {children}\n      {error && (\n        <div className=\"error\" style={{ color: \"red\" }}>\n          {error}\n        </div>\n      )}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export { default } from \"./TextInput\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ProgressBar extends React.Component {\n  // constructor(){\n  //   super()\n  //   this.getWidthAsPercentOfTotalWidth=this.getWidthAsPercentOfTotalWidth.bind(this)\n  // }\n  // you can include the propTypes declaration this way:\n  // static propTypes = {\n  //   percent: PropTypes.number.isRequired,\n  //   width: PropTypes.number.isRequired,\n  //   height: PropTypes.number\n  // };\n\n  // static defaultProps = {\n  //   height: 5\n  // };\n  getColor = percent => {\n    if (this.props.percent === 100) return \"green\";\n    return this.props.percent > 50 ? \"lightgreen\" : \"red\";\n  };\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  };\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div style={{ border: \"solid 1px lightgray\", width: width }}>\n                \n        <div\n          style={{\n            width: this.getWidthAsPercentOfTotalWidth(),\n            height,\n            backgroundColor: this.getColor(percent)\n          }}\n        />\n              \n      </div>\n    );\n  }\n}\n\n// Either you can use static (line 5 and 11) to declare PropTypes or you can add separatly:\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;\n","export { default } from \"./ProgressBar.js\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ProgressBar from \"../ProgressBar\";\nimport EyeIcon from \"../EyeIcon\";\nimport TextInput from \"../TextInput\";\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    };\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  };\n\n  render() {\n    const {\n      htmlId,\n      value,\n      label,\n      error,\n      onChange,\n      placeholder,\n      maxLength,\n      showVisibilityToggle,\n      quality,\n      ...props\n    } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? \"text\" : \"password\"}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}\n      >\n        {showVisibilityToggle && (\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}\n          >\n            {/* <button onClick={this.toggleShowPassword} style={{ marginLeft: 5 }}> */}\n            <EyeIcon />\n            {/* </button> */}\n          </a>\n        )}\n        {value.length > 0 && quality && (\n          <ProgressBar percent={quality} width={130} />\n        )}\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: \"Password\"\n};\n\nexport default PasswordInput;\n","export { default } from \"./PasswordInput\";\n","import React from \"react\";\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 22 22\"\n    >\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default EyeIcon;\n","export { default } from \"./EyeIcon\";\n","module.exports = [{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from \\\"react\\\";\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg\\n      width=\\\"16\\\"\\n      height=\\\"16\\\"\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 0 22 22\\\"\\n    >\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  );\\n}\\n\\nexport default EyeIcon;\\n\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport EyeIcon from \\\"ps-react/EyeIcon\\\";\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"A super simple component that says Hello with a custom message.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"World\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\n/** A super simple component that says Hello with a custom message. */\\nfunction HelloWorld({ message }) {\\n  return <div>Hello {message}</div>;\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: \\\"World\\\"\\n};\\n\\nexport default HelloWorld;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from \\\"react\\\";\\n// import HelloWorld from \\\"../../../components/HelloWorld/HelloWorld\\\";\\nimport HelloWorld from \\\"ps-react/HelloWorld\\\";\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"Reuseable React Components\\\" />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({ htmlFor, label, required }) {\\n  return (\\n    <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\n      {label} {required && <span style={{ color: \\\"red\\\" }}> *</span>}\\n    </label>\\n  );\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from \\\"react\\\";\\nimport Label from \\\"ps-react/Label\\\";\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\n}\\n\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Required label\",\n    \"code\": \"import React from \\\"react\\\";\\nimport Label from \\\"ps-react/Label\\\";\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Password\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport ProgressBar from \\\"../ProgressBar\\\";\\nimport EyeIcon from \\\"../EyeIcon\\\";\\nimport TextInput from \\\"../TextInput\\\";\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    };\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  };\\n\\n  render() {\\n    const {\\n      htmlId,\\n      value,\\n      label,\\n      error,\\n      onChange,\\n      placeholder,\\n      maxLength,\\n      showVisibilityToggle,\\n      quality,\\n      ...props\\n    } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? \\\"text\\\" : \\\"password\\\"}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}\\n      >\\n        {showVisibilityToggle && (\\n          <a\\n            href=\\\"#\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}\\n          >\\n            {/* <button onClick={this.toggleShowPassword} style={{ marginLeft: 5 }}> */}\\n            <EyeIcon />\\n            {/* </button> */}\\n          </a>\\n        )}\\n        {value.length > 0 && quality && (\\n          <ProgressBar percent={quality} width={130} />\\n        )}\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: \\\"Password\\\"\\n};\\n\\nexport default PasswordInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from \\\"react\\\";\\nimport PasswordInput from \\\"ps-react/PasswordInput\\\";\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: \\\"\\\"\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nclass ProgressBar extends React.Component {\\n  // constructor(){\\n  //   super()\\n  //   this.getWidthAsPercentOfTotalWidth=this.getWidthAsPercentOfTotalWidth.bind(this)\\n  // }\\n  // you can include the propTypes declaration this way:\\n  // static propTypes = {\\n  //   percent: PropTypes.number.isRequired,\\n  //   width: PropTypes.number.isRequired,\\n  //   height: PropTypes.number\\n  // };\\n\\n  // static defaultProps = {\\n  //   height: 5\\n  // };\\n  getColor = percent => {\\n    if (this.props.percent === 100) return \\\"green\\\";\\n    return this.props.percent > 50 ? \\\"lightgreen\\\" : \\\"red\\\";\\n  };\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  };\\n\\n  render() {\\n    const { percent, width, height } = this.props;\\n    return (\\n      <div style={{ border: \\\"solid 1px lightgray\\\", width: width }}>\\n                \\n        <div\\n          style={{\\n            width: this.getWidthAsPercentOfTotalWidth(),\\n            height,\\n            backgroundColor: this.getColor(percent)\\n          }}\\n        />\\n              \\n      </div>\\n    );\\n  }\\n}\\n\\n// Either you can use static (line 5 and 11) to declare PropTypes or you can add separatly:\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\\n\",\n  \"examples\": [{\n    \"name\": \"Example100percent\",\n    \"description\": \"100% progress and height 20px\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 100% progress and height 20px */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />;\\n}\\n\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />;\\n}\\n\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% progress\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport TextInput from \\\"../TextInput\\\";\\nimport PasswordInput from \\\"../PasswordInput\\\";\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: \\\"\\\",\\n        password: \\\"\\\"\\n      },\\n      errors: {},\\n      submitted: false\\n    };\\n  }\\n\\n  onChange = event => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({ user });\\n  };\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(\\n      (password.length / this.props.minPasswordLength) * 100,\\n      10\\n    );\\n    return percentOfMinLength;\\n  }\\n\\n  validate({ email, password }) {\\n    const errors = {};\\n    const { minPasswordLength } = this.props;\\n\\n    if (!email) errors.email = \\\"Email required.\\\";\\n    if (password.length < minPasswordLength)\\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({ errors });\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const { user } = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({ submitted: true });\\n    }\\n  };\\n\\n  render() {\\n    const { errors, submitted } = this.state;\\n    const { email, password } = this.state.user;\\n\\n    return submitted ? (\\n      <h2>{this.props.confirmationMessage}</h2>\\n    ) : (\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={this.onChange}\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          required\\n        />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password}\\n        />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </div>\\n    );\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n};\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport RegistrationForm from \\\"ps-react/RegistrationForm\\\";\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n  onSubmit = user => {\\n    console.log(user);\\n  };\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />;\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div style={{ marginBottom: 16 }}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && { border: \\\"solid 1px red\\\" }}\\n        {...props}\\n      />\\n      {children}\\n      {error && (\\n        <div className=\\\"error\\\" style={{ color: \\\"red\\\" }}>\\n          {error}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInput from \\\"ps-react/TextInput\\\";\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        placeholder=\\\"First Name\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    );\\n  }\\n}\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInput from \\\"ps-react/TextInput\\\";\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        placeholder=\\\"First Name\\\"\\n        onChange={() => {}}\\n      />\\n    );\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && \\\"textinput__input--state-error\\\"}\\n        {...props}\\n      />\\n      {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  );\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputBEM from \\\"ps-react/TextInputBEM\\\";\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    );\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\nimport styles from \\\"./textInput.css\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && styles.inputError}\\n        {...props}\\n      />\\n      {children}\\n      {error && <div className={styles.error}>{error}</div>}\\n    </div>\\n  );\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputCSSModules from \\\"ps-react/TextInputCSSModules\\\";\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    );\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputStyledComponents\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\nimport styled from \\\"styled-components\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  const Error = styled.div`\\n    color: red;\\n  `;\\n\\n  const Input = styled.input`\\n    border: ${error && \\\"solid 1px red\\\"};\\n    display: block;\\n  `;\\n\\n  const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n\\n  return (\\n    <Fieldset>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        {...props}\\n      />\\n      {children}\\n      {error && <Error>{error}</Error>}\\n    </Fieldset>\\n  );\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputStyledComponents from \\\"ps-react/TextInputStyledComponents\\\";\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputStyledComponents\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    );\\n  }\\n}\\n\"\n  }]\n}];","import React from \"react\";\nimport EyeIcon from \"ps-react/EyeIcon\";\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","import React from \"react\";\nimport Label from \"ps-react/Label\";\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />;\n}\n","import React from \"react\";\nimport Label from \"ps-react/Label\";\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />;\n}\n","import React from \"react\";\nimport PasswordInput from \"ps-react/PasswordInput\";\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: \"\"\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />;\n}\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />;\n}\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />;\n}\n","import React from \"react\";\nimport TextInput from \"ps-react/TextInput\";\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        placeholder=\"First Name\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport TextInput from \"ps-react/TextInput\";\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        placeholder=\"First Name\"\n        onChange={() => {}}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && \"textinput__input--state-error\"}\n        {...props}\n      />\n      {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport TextInputBEM from \"ps-react/TextInputBEM\";\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styled from \"styled-components\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  const Error = styled.div`\n    color: red;\n  `;\n\n  const Input = styled.input`\n    border: ${error && \"solid 1px red\"};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}\n      />\n      {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport TextInputStyledComponents from \"ps-react/TextInputStyledComponents\";\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styles from \"./textInput.css\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && styles.inputError}\n        {...props}\n      />\n      {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport TextInputCSSModules from \"ps-react/TextInputCSSModules\";\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** A super simple component that says Hello with a custom message. */\nfunction HelloWorld({ message }) {\n  return <div>Hello {message}</div>;\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: \"World\"\n};\n\nexport default HelloWorld;\n","import HelloWorld from \"./HelloWorld\";\n\nexport default HelloWorld;\n","import React from \"react\";\n// import HelloWorld from \"../../../components/HelloWorld/HelloWorld\";\nimport HelloWorld from \"ps-react/HelloWorld\";\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Reuseable React Components\" />;\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../TextInput\";\nimport PasswordInput from \"../PasswordInput\";\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: \"\",\n        password: \"\"\n      },\n      errors: {},\n      submitted: false\n    };\n  }\n\n  onChange = event => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({ user });\n  };\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(\n      (password.length / this.props.minPasswordLength) * 100,\n      10\n    );\n    return percentOfMinLength;\n  }\n\n  validate({ email, password }) {\n    const errors = {};\n    const { minPasswordLength } = this.props;\n\n    if (!email) errors.email = \"Email required.\";\n    if (password.length < minPasswordLength)\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({ errors });\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const { user } = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({ submitted: true });\n    }\n  };\n\n  render() {\n    const { errors, submitted } = this.state;\n    const { email, password } = this.state.user;\n\n    return submitted ? (\n      <h2>{this.props.confirmationMessage}</h2>\n    ) : (\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required\n        />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password}\n        />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    );\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n};\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from \"react\";\nimport RegistrationForm from \"ps-react/RegistrationForm\";\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = user => {\n    console.log(user);\n  };\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />;\n  }\n}\n","var map = {\n\t\"./EyeIcon/Example\": 18,\n\t\"./EyeIcon/Example.js\": 18,\n\t\"./HelloWorld/ExampleHelloWorld\": 30,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 30,\n\t\"./Label/ExampleOptional\": 19,\n\t\"./Label/ExampleOptional.js\": 19,\n\t\"./Label/ExampleRequired\": 20,\n\t\"./Label/ExampleRequired.js\": 20,\n\t\"./PasswordInput/ExampleAllFeatures\": 21,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 21,\n\t\"./ProgressBar/Example100percent\": 22,\n\t\"./ProgressBar/Example100percent.js\": 22,\n\t\"./ProgressBar/Example10Percent\": 23,\n\t\"./ProgressBar/Example10Percent.js\": 23,\n\t\"./ProgressBar/Example70Percent\": 24,\n\t\"./ProgressBar/Example70Percent.js\": 24,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 31,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 31,\n\t\"./TextInput/ExampleError\": 25,\n\t\"./TextInput/ExampleError.js\": 25,\n\t\"./TextInput/ExampleOptional\": 26,\n\t\"./TextInput/ExampleOptional.js\": 26,\n\t\"./TextInputBEM/ExampleError\": 27,\n\t\"./TextInputBEM/ExampleError.js\": 27,\n\t\"./TextInputCSSModules/ExampleError\": 29,\n\t\"./TextInputCSSModules/ExampleError.js\": 29,\n\t\"./TextInputStyledComponents/ExampleError\": 28,\n\t\"./TextInputStyledComponents/ExampleError.js\": 28\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 41;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Navigation = ({ components }) => {\n  return (\n    <ul className=\"navigation\">\n      {components.map(name => {\n        return (\n          <li key={name}>\n            <a href={`#${name}`}>{name}</a>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport javascript from \"highlight.js/lib/languages/javascript\";\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage(\"javascript\", javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre\n        ref={ref => {\n          this.element = ref;\n        }}\n      >\n        <code>{this.props.children}</code>\n      </pre>\n    );\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n};\n\nexport default CodeExample;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CodeExample from \"./CodeExample\";\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n    // this.toggleCode = this.toggleCode.bind(this);\n  }\n\n  // toggleCode(event) {\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return { showCode: !prevState.showCode };\n    });\n  };\n\n  render() {\n    const { showCode } = this.state;\n    const { code, description, name } = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${\n      this.props.componentName\n    }/${name}`).default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n\n        <ExampleComponent />\n\n        <p>\n          {/* <a href=\"#\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a> */}\n          <a href=\"#\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    );\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n};\n\nexport default Example;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Props = ({ props }) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>\n                {props[key].defaultValue && props[key].defaultValue.value}\n              </td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Example from \"./Example\";\nimport Props from \"./Props\";\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {examples.length > 0\n        ? examples.map(example => (\n            <Example\n              key={example.name}\n              example={example}\n              componentName={name}\n            />\n          ))\n        : \"No examples exist.\"}\n\n      <h3>Props</h3>\n      {props ? <Props props={props} /> : \"This component accepts no props.\"}\n    </div>\n  );\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from \"react\";\nimport Navigation from \"./Navigation\";\nimport ComponentPage from \"./ComponentPage\";\nimport componentData from \"../../config/componentData\";\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"hashchange\", () => {\n      this.setState({ route: window.location.hash.substr(1) });\n    });\n  }\n\n  render() {\n    const { route } = this.state;\n    const component = route\n      ? componentData.filter(component => component.name === route)[0]\n      : componentData[0];\n\n    return (\n      <div>\n        <Navigation\n          components={componentData.map(component => component.name)}\n        />\n        <ComponentPage component={component} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Docs from \"./docs/Docs\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/highlight.js/styles/ocean.css\";\n\nReactDOM.render(<Docs />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}